
//! This file is auto generated by query_tests/generate.
//! Do not edit manually --> will result in sadness
use std::path::Path;
use crate::runner::Runner;

#[tokio::test]
// Tests from "basic.sql",
async fn test_cases_basic_sql() {
    test_helpers::maybe_start_logging();

    let input_path = Path::new("cases").join("in").join("basic.sql");
    let mut runner = Runner::new();
    runner
        .run(input_path)
        .await
        .expect("test failed");
    runner
        .flush()
        .expect("flush worked");
}

#[tokio::test]
// Tests from "dedup_and_predicates_parquet.sql",
async fn test_cases_dedup_and_predicates_parquet_sql() {
    test_helpers::maybe_start_logging();

    let input_path = Path::new("cases").join("in").join("dedup_and_predicates_parquet.sql");
    let mut runner = Runner::new();
    runner
        .run(input_path)
        .await
        .expect("test failed");
    runner
        .flush()
        .expect("flush worked");
}

#[tokio::test]
// Tests from "dedup_and_predicates_parquet_ingester.sql",
async fn test_cases_dedup_and_predicates_parquet_ingester_sql() {
    test_helpers::maybe_start_logging();

    let input_path = Path::new("cases").join("in").join("dedup_and_predicates_parquet_ingester.sql");
    let mut runner = Runner::new();
    runner
        .run(input_path)
        .await
        .expect("test failed");
    runner
        .flush()
        .expect("flush worked");
}

#[tokio::test]
// Tests from "duplicates_ingester.sql",
async fn test_cases_duplicates_ingester_sql() {
    test_helpers::maybe_start_logging();

    let input_path = Path::new("cases").join("in").join("duplicates_ingester.sql");
    let mut runner = Runner::new();
    runner
        .run(input_path)
        .await
        .expect("test failed");
    runner
        .flush()
        .expect("flush worked");
}

#[tokio::test]
// Tests from "duplicates_parquet.sql",
async fn test_cases_duplicates_parquet_sql() {
    test_helpers::maybe_start_logging();

    let input_path = Path::new("cases").join("in").join("duplicates_parquet.sql");
    let mut runner = Runner::new();
    runner
        .run(input_path)
        .await
        .expect("test failed");
    runner
        .flush()
        .expect("flush worked");
}

#[tokio::test]
// Tests from "duplicates_parquet_many.sql",
async fn test_cases_duplicates_parquet_many_sql() {
    test_helpers::maybe_start_logging();

    let input_path = Path::new("cases").join("in").join("duplicates_parquet_many.sql");
    let mut runner = Runner::new();
    runner
        .run(input_path)
        .await
        .expect("test failed");
    runner
        .flush()
        .expect("flush worked");
}

#[tokio::test]
// Tests from "new_sql_system_tables.sql",
async fn test_cases_new_sql_system_tables_sql() {
    test_helpers::maybe_start_logging();

    let input_path = Path::new("cases").join("in").join("new_sql_system_tables.sql");
    let mut runner = Runner::new();
    runner
        .run(input_path)
        .await
        .expect("test failed");
    runner
        .flush()
        .expect("flush worked");
}

#[tokio::test]
// Tests from "periods.sql",
async fn test_cases_periods_sql() {
    test_helpers::maybe_start_logging();

    let input_path = Path::new("cases").join("in").join("periods.sql");
    let mut runner = Runner::new();
    runner
        .run(input_path)
        .await
        .expect("test failed");
    runner
        .flush()
        .expect("flush worked");
}

#[tokio::test]
// Tests from "pushdown.sql",
async fn test_cases_pushdown_sql() {
    test_helpers::maybe_start_logging();

    let input_path = Path::new("cases").join("in").join("pushdown.sql");
    let mut runner = Runner::new();
    runner
        .run(input_path)
        .await
        .expect("test failed");
    runner
        .flush()
        .expect("flush worked");
}

#[tokio::test]
// Tests from "retention.sql",
async fn test_cases_retention_sql() {
    test_helpers::maybe_start_logging();

    let input_path = Path::new("cases").join("in").join("retention.sql");
    let mut runner = Runner::new();
    runner
        .run(input_path)
        .await
        .expect("test failed");
    runner
        .flush()
        .expect("flush worked");
}

#[tokio::test]
// Tests from "selectors.sql",
async fn test_cases_selectors_sql() {
    test_helpers::maybe_start_logging();

    let input_path = Path::new("cases").join("in").join("selectors.sql");
    let mut runner = Runner::new();
    runner
        .run(input_path)
        .await
        .expect("test failed");
    runner
        .flush()
        .expect("flush worked");
}

#[tokio::test]
// Tests from "several_chunks.sql",
async fn test_cases_several_chunks_sql() {
    test_helpers::maybe_start_logging();

    let input_path = Path::new("cases").join("in").join("several_chunks.sql");
    let mut runner = Runner::new();
    runner
        .run(input_path)
        .await
        .expect("test failed");
    runner
        .flush()
        .expect("flush worked");
}

#[tokio::test]
// Tests from "sql_information_schema.sql",
async fn test_cases_sql_information_schema_sql() {
    test_helpers::maybe_start_logging();

    let input_path = Path::new("cases").join("in").join("sql_information_schema.sql");
    let mut runner = Runner::new();
    runner
        .run(input_path)
        .await
        .expect("test failed");
    runner
        .flush()
        .expect("flush worked");
}

#[tokio::test]
// Tests from "timestamps.sql",
async fn test_cases_timestamps_sql() {
    test_helpers::maybe_start_logging();

    let input_path = Path::new("cases").join("in").join("timestamps.sql");
    let mut runner = Runner::new();
    runner
        .run(input_path)
        .await
        .expect("test failed");
    runner
        .flush()
        .expect("flush worked");
}

#[tokio::test]
// Tests from "two_chunks.sql",
async fn test_cases_two_chunks_sql() {
    test_helpers::maybe_start_logging();

    let input_path = Path::new("cases").join("in").join("two_chunks.sql");
    let mut runner = Runner::new();
    runner
        .run(input_path)
        .await
        .expect("test failed");
    runner
        .flush()
        .expect("flush worked");
}

#[tokio::test]
// Tests from "two_chunks_missing_columns.sql",
async fn test_cases_two_chunks_missing_columns_sql() {
    test_helpers::maybe_start_logging();

    let input_path = Path::new("cases").join("in").join("two_chunks_missing_columns.sql");
    let mut runner = Runner::new();
    runner
        .run(input_path)
        .await
        .expect("test failed");
    runner
        .flush()
        .expect("flush worked");
}