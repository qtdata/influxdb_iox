-- Test Setup: OneMeasurementFourChunksWithDuplicatesParquetOnly
-- SQL: select time, state, city, min_temp, max_temp, area from h2o order by time, state, city;
-- Results After Sorting
+--------------------------------+-------+---------+----------+----------+------+
| time                           | state | city    | min_temp | max_temp | area |
+--------------------------------+-------+---------+----------+----------+------+
| 1970-01-01T00:00:00.000000050Z | MA    | Boston  | 70.4     |          |      |
| 1970-01-01T00:00:00.000000150Z | MA    | Bedford | 71.59    | 78.75    | 742  |
| 1970-01-01T00:00:00.000000250Z | MA    | Andover |          | 69.2     |      |
| 1970-01-01T00:00:00.000000250Z | MA    | Boston  | 65.4     | 75.4     |      |
| 1970-01-01T00:00:00.000000250Z | MA    | Reading | 53.4     |          |      |
| 1970-01-01T00:00:00.000000300Z | CA    | SF      | 79       | 87.2     | 500  |
| 1970-01-01T00:00:00.000000300Z | CA    | SJ      | 78.5     | 88       |      |
| 1970-01-01T00:00:00.000000350Z | CA    | SJ      | 75.5     | 84.08    |      |
| 1970-01-01T00:00:00.000000400Z | MA    | Bedford | 65.22    | 80.75    | 750  |
| 1970-01-01T00:00:00.000000400Z | MA    | Boston  | 65.4     | 82.67    |      |
| 1970-01-01T00:00:00.000000450Z | CA    | SJ      | 77       | 90.7     |      |
| 1970-01-01T00:00:00.000000500Z | CA    | SJ      | 69.5     | 88.2     |      |
| 1970-01-01T00:00:00.000000600Z | MA    | Bedford |          | 88.75    | 742  |
| 1970-01-01T00:00:00.000000600Z | MA    | Boston  | 67.4     |          |      |
| 1970-01-01T00:00:00.000000600Z | MA    | Reading | 60.4     |          |      |
| 1970-01-01T00:00:00.000000650Z | CA    | SF      | 68.4     | 85.7     | 500  |
| 1970-01-01T00:00:00.000000650Z | CA    | SJ      | 69.5     | 89.2     |      |
| 1970-01-01T00:00:00.000000700Z | CA    | SJ      | 75.5     | 84.08    |      |
+--------------------------------+-------+---------+----------+----------+------+
-- SQL: explain select time, state, city, min_temp, max_temp, area from h2o order by time, state, city;
-- Results After Normalizing UUIDs
----------
| plan_type    | plan    |
----------
| logical_plan    | Sort: h2o.time ASC NULLS LAST, h2o.state ASC NULLS LAST, h2o.city ASC NULLS LAST    |
|    |   Projection: h2o.time, h2o.state, h2o.city, h2o.min_temp, h2o.max_temp, h2o.area    |
|    |     TableScan: h2o projection=[area, city, max_temp, min_temp, state, time]    |
| physical_plan    | SortExec: expr=[time@0 ASC NULLS LAST,state@1 ASC NULLS LAST,city@2 ASC NULLS LAST]    |
|    |   CoalescePartitionsExec    |
|    |     ProjectionExec: expr=[time@5 as time, state@4 as state, city@1 as city, min_temp@3 as min_temp, max_temp@2 as max_temp, area@0 as area]    |
|    |       UnionExec    |
|    |         DeduplicateExec: [state@4 ASC,city@1 ASC,time@5 ASC]    |
|    |           SortPreservingMergeExec: [state@4 ASC,city@1 ASC,time@5 ASC]    |
|    |             UnionExec    |
|    |               ParquetExec: limit=None, partitions={1 group: [[1/1/1/1/00000000-0000-0000-0000-000000000000.parquet]]}, output_ordering=[state@4 ASC, city@1 ASC, time@5 ASC], projection=[area, city, max_temp, min_temp, state, time]    |
|    |               ParquetExec: limit=None, partitions={1 group: [[1/1/1/1/00000000-0000-0000-0000-000000000001.parquet]]}, output_ordering=[state@4 ASC, city@1 ASC, time@5 ASC], projection=[area, city, max_temp, min_temp, state, time]    |
|    |         ParquetExec: limit=None, partitions={2 groups: [[1/1/1/1/00000000-0000-0000-0000-000000000002.parquet], [1/1/1/1/00000000-0000-0000-0000-000000000003.parquet]]}, projection=[area, city, max_temp, min_temp, state, time]    |
|    |    |
----------
-- SQL: EXPLAIN select time, state, city, min_temp, max_temp, area from h2o;
-- Results After Normalizing UUIDs
----------
| plan_type    | plan    |
----------
| logical_plan    | Projection: h2o.time, h2o.state, h2o.city, h2o.min_temp, h2o.max_temp, h2o.area    |
|    |   TableScan: h2o projection=[area, city, max_temp, min_temp, state, time]    |
| physical_plan    | ProjectionExec: expr=[time@5 as time, state@4 as state, city@1 as city, min_temp@3 as min_temp, max_temp@2 as max_temp, area@0 as area]    |
|    |   UnionExec    |
|    |     DeduplicateExec: [state@4 ASC,city@1 ASC,time@5 ASC]    |
|    |       SortPreservingMergeExec: [state@4 ASC,city@1 ASC,time@5 ASC]    |
|    |         UnionExec    |
|    |           ParquetExec: limit=None, partitions={1 group: [[1/1/1/1/00000000-0000-0000-0000-000000000000.parquet]]}, output_ordering=[state@4 ASC, city@1 ASC, time@5 ASC], projection=[area, city, max_temp, min_temp, state, time]    |
|    |           ParquetExec: limit=None, partitions={1 group: [[1/1/1/1/00000000-0000-0000-0000-000000000001.parquet]]}, output_ordering=[state@4 ASC, city@1 ASC, time@5 ASC], projection=[area, city, max_temp, min_temp, state, time]    |
|    |     ParquetExec: limit=None, partitions={2 groups: [[1/1/1/1/00000000-0000-0000-0000-000000000002.parquet], [1/1/1/1/00000000-0000-0000-0000-000000000003.parquet]]}, projection=[area, city, max_temp, min_temp, state, time]    |
|    |    |
----------
-- SQL: EXPLAIN select state as name from h2o UNION ALL select city as name from h2o;
-- Results After Normalizing UUIDs
----------
| plan_type    | plan    |
----------
| logical_plan    | Union    |
|    |   Projection: h2o.state AS name    |
|    |     TableScan: h2o projection=[state]    |
|    |   Projection: h2o.city AS name    |
|    |     TableScan: h2o projection=[city]    |
| physical_plan    | UnionExec    |
|    |   ProjectionExec: expr=[state@0 as name]    |
|    |     UnionExec    |
|    |       ProjectionExec: expr=[state@1 as state]    |
|    |         DeduplicateExec: [state@1 ASC,city@0 ASC,time@2 ASC]    |
|    |           SortPreservingMergeExec: [state@1 ASC,city@0 ASC,time@2 ASC]    |
|    |             UnionExec    |
|    |               ParquetExec: limit=None, partitions={1 group: [[1/1/1/1/00000000-0000-0000-0000-000000000000.parquet]]}, output_ordering=[state@1 ASC, city@0 ASC, time@2 ASC], projection=[city, state, time]    |
|    |               ParquetExec: limit=None, partitions={1 group: [[1/1/1/1/00000000-0000-0000-0000-000000000001.parquet]]}, output_ordering=[state@1 ASC, city@0 ASC, time@2 ASC], projection=[city, state, time]    |
|    |       ParquetExec: limit=None, partitions={2 groups: [[1/1/1/1/00000000-0000-0000-0000-000000000002.parquet], [1/1/1/1/00000000-0000-0000-0000-000000000003.parquet]]}, projection=[state]    |
|    |   ProjectionExec: expr=[city@0 as name]    |
|    |     UnionExec    |
|    |       ProjectionExec: expr=[city@0 as city]    |
|    |         DeduplicateExec: [state@1 ASC,city@0 ASC,time@2 ASC]    |
|    |           SortPreservingMergeExec: [state@1 ASC,city@0 ASC,time@2 ASC]    |
|    |             UnionExec    |
|    |               ParquetExec: limit=None, partitions={1 group: [[1/1/1/1/00000000-0000-0000-0000-000000000000.parquet]]}, output_ordering=[state@1 ASC, city@0 ASC, time@2 ASC], projection=[city, state, time]    |
|    |               ParquetExec: limit=None, partitions={1 group: [[1/1/1/1/00000000-0000-0000-0000-000000000001.parquet]]}, output_ordering=[state@1 ASC, city@0 ASC, time@2 ASC], projection=[city, state, time]    |
|    |       ParquetExec: limit=None, partitions={2 groups: [[1/1/1/1/00000000-0000-0000-0000-000000000002.parquet], [1/1/1/1/00000000-0000-0000-0000-000000000003.parquet]]}, projection=[city]    |
|    |    |
----------
-- SQL: select count(*) from h2o;
+-----------------+
| COUNT(UInt8(1)) |
+-----------------+
| 18              |
+-----------------+
-- SQL: EXPLAIN ANALYZE SELECT * from h2o where state = 'MA'
-- Results After Normalizing UUIDs
-- Results After Normalizing Metrics
----------
| plan_type    | plan    |
----------
| Plan with Metrics    | CoalescePartitionsExec, metrics=[elapsed_compute=1.234ms, mem_used=0, output_rows=10, spill_count=0, spilled_bytes=0]    |
|    |   ProjectionExec: expr=[area@0 as area, city@1 as city, max_temp@2 as max_temp, min_temp@3 as min_temp, state@4 as state, time@5 as time], metrics=[elapsed_compute=1.234ms, mem_used=0, output_rows=10, spill_count=0, spilled_bytes=0]    |
|    |     CoalesceBatchesExec: target_batch_size=8192, metrics=[elapsed_compute=1.234ms, mem_used=0, output_rows=10, spill_count=0, spilled_bytes=0]    |
|    |       FilterExec: state@4 = MA, metrics=[elapsed_compute=1.234ms, mem_used=0, output_rows=10, spill_count=0, spilled_bytes=0]    |
|    |         RepartitionExec: partitioning=RoundRobinBatch(4), input_partitions=3, metrics=[fetch_time=1.234ms, repart_time=1.234ms, send_time=1.234ms]    |
|    |           UnionExec, metrics=[elapsed_compute=1.234ms, mem_used=0, output_rows=10, spill_count=0, spilled_bytes=0]    |
|    |             DeduplicateExec: [state@4 ASC,city@1 ASC,time@5 ASC], metrics=[elapsed_compute=1.234ms, mem_used=0, num_dupes=2, output_rows=5, spill_count=0, spilled_bytes=0]    |
|    |               SortPreservingMergeExec: [state@4 ASC,city@1 ASC,time@5 ASC], metrics=[elapsed_compute=1.234ms, mem_used=0, output_rows=7, spill_count=0, spilled_bytes=0]    |
|    |                 UnionExec, metrics=[elapsed_compute=1.234ms, mem_used=0, output_rows=7, spill_count=0, spilled_bytes=0]    |
|    |                   ParquetExec: limit=None, partitions={1 group: [[1/1/1/1/00000000-0000-0000-0000-000000000000.parquet]]}, predicate=state = Dictionary(Int32, Utf8("MA")), pruning_predicate=state_min@0 <= MA AND MA <= state_max@1, output_ordering=[state@4 ASC, city@1 ASC, time@5 ASC], projection=[area, city, max_temp, min_temp, state, time], metrics=[bytes_scanned=474, elapsed_compute=1.234ms, mem_used=0, num_predicate_creation_errors=0, output_rows=4, page_index_eval_time=1.234ms, page_index_rows_filtered=0, predicate_evaluation_errors=0, pushdown_eval_time=1.234ms, pushdown_rows_filtered=0, row_groups_pruned=0, spill_count=0, spilled_bytes=0, time_elapsed_opening=1.234ms, time_elapsed_processing=1.234ms, time_elapsed_scanning_total=1.234ms, time_elapsed_scanning_until_data=1.234ms]    |
|    |                   ParquetExec: limit=None, partitions={1 group: [[1/1/1/1/00000000-0000-0000-0000-000000000001.parquet]]}, predicate=state = Dictionary(Int32, Utf8("MA")), pruning_predicate=state_min@0 <= MA AND MA <= state_max@1, output_ordering=[state@4 ASC, city@1 ASC, time@5 ASC], projection=[area, city, max_temp, min_temp, state, time], metrics=[bytes_scanned=632, elapsed_compute=1.234ms, mem_used=0, num_predicate_creation_errors=0, output_rows=3, page_index_eval_time=1.234ms, page_index_rows_filtered=0, predicate_evaluation_errors=0, pushdown_eval_time=1.234ms, pushdown_rows_filtered=3, row_groups_pruned=0, spill_count=0, spilled_bytes=0, time_elapsed_opening=1.234ms, time_elapsed_processing=1.234ms, time_elapsed_scanning_total=1.234ms, time_elapsed_scanning_until_data=1.234ms]    |
|    |             ParquetExec: limit=None, partitions={2 groups: [[1/1/1/1/00000000-0000-0000-0000-000000000002.parquet], [1/1/1/1/00000000-0000-0000-0000-000000000003.parquet]]}, predicate=state = Dictionary(Int32, Utf8("MA")), pruning_predicate=state_min@0 <= MA AND MA <= state_max@1, projection=[area, city, max_temp, min_temp, state, time], metrics=[bytes_scanned=1219, elapsed_compute=1.234ms, mem_used=0, num_predicate_creation_errors=0, output_rows=5, page_index_eval_time=1.234ms, page_index_rows_filtered=0, predicate_evaluation_errors=0, pushdown_eval_time=1.234ms, pushdown_rows_filtered=5, row_groups_pruned=0, spill_count=0, spilled_bytes=0, time_elapsed_opening=1.234ms, time_elapsed_processing=1.234ms, time_elapsed_scanning_total=1.234ms, time_elapsed_scanning_until_data=1.234ms]    |
|    |    |
----------