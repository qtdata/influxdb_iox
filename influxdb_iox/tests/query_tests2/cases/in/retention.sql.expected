-- Test Setup: ThreeChunksWithRetention
-- SQL: SELECT * FROM cpu order by host, load, time;
+------+------+----------------------+
| host | load | time                 |
+------+------+----------------------+
| a    | 1    | 2022-01-01T01:00:00Z |
| b    | 2    | 2022-01-01T01:00:00Z |
| bb   | 21   | 2022-01-01T01:00:00Z |
+------+------+----------------------+
-- SQL: EXPLAIN SELECT * FROM cpu order by host, load, time;
-- Results After Normalizing UUIDs
-- Results After Normalizing Filters
----------
| plan_type    | plan    |
----------
| logical_plan    | Sort: cpu.host ASC NULLS LAST, cpu.load ASC NULLS LAST, cpu.time ASC NULLS LAST    |
|    |   Projection: cpu.host, cpu.load, cpu.time    |
|    |     TableScan: cpu projection=[host, load, time]    |
| physical_plan    | SortExec: expr=[host@0 ASC NULLS LAST,load@1 ASC NULLS LAST,time@2 ASC NULLS LAST]    |
|    |   ProjectionExec: expr=[host@0 as host, load@1 as load, time@2 as time]    |
|    |     DeduplicateExec: [host@0 ASC,time@2 ASC]    |
|    |       SortPreservingMergeExec: [host@0 ASC,time@2 ASC]    |
|    |         UnionExec    |
|    |           CoalesceBatchesExec: target_batch_size=8192    |
|    |             FilterExec: <REDACTED>
|    |               ParquetExec: limit=None, partitions={1 group: [[1/1/1/1/00000000-0000-0000-0000-000000000000.parquet]]}, output_ordering=[host@0 ASC, time@2 ASC], projection=[host, load, time]    |
|    |           CoalesceBatchesExec: target_batch_size=8192    |
|    |             FilterExec: <REDACTED>
|    |               ParquetExec: limit=None, partitions={1 group: [[1/1/1/1/00000000-0000-0000-0000-000000000001.parquet]]}, output_ordering=[host@0 ASC, time@2 ASC], projection=[host, load, time]    |
|    |    |
----------
-- SQL: SELECT * FROM cpu WHERE host != 'b' ORDER BY host,time;
+------+------+----------------------+
| host | load | time                 |
+------+------+----------------------+
| a    | 1    | 2022-01-01T01:00:00Z |
| bb   | 21   | 2022-01-01T01:00:00Z |
+------+------+----------------------+
-- SQL: EXPLAIN SELECT * FROM cpu WHERE host != 'b' ORDER BY host,time;
-- Results After Normalizing UUIDs
-- Results After Normalizing Filters
----------
| plan_type    | plan    |
----------
| logical_plan    | Sort: cpu.host ASC NULLS LAST, cpu.time ASC NULLS LAST    |
|    |   Projection: cpu.host, cpu.load, cpu.time    |
|    |     Filter: cpu.host != Dictionary(Int32, Utf8("b"))    |
|    |       TableScan: cpu projection=[host, load, time], partial_filters=[cpu.host != Dictionary(Int32, Utf8("b"))]    |
| physical_plan    | SortExec: expr=[host@0 ASC NULLS LAST,time@2 ASC NULLS LAST]    |
|    |   CoalescePartitionsExec    |
|    |     ProjectionExec: expr=[host@0 as host, load@1 as load, time@2 as time]    |
|    |       CoalesceBatchesExec: target_batch_size=8192    |
|    |         FilterExec: <REDACTED>
|    |           RepartitionExec: partitioning=RoundRobinBatch(4), input_partitions=1    |
|    |             DeduplicateExec: [host@0 ASC,time@2 ASC]    |
|    |               SortPreservingMergeExec: [host@0 ASC,time@2 ASC]    |
|    |                 UnionExec    |
|    |                   CoalesceBatchesExec: target_batch_size=8192    |
|    |                     FilterExec: <REDACTED>
|    |                       ParquetExec: limit=None, partitions={1 group: [[1/1/1/1/00000000-0000-0000-0000-000000000000.parquet]]}, predicate=host != Dictionary(Int32, Utf8("b")), pruning_predicate=host_min@0 != b OR b != host_max@1, output_ordering=[host@0 ASC, time@2 ASC], projection=[host, load, time]    |
|    |                   CoalesceBatchesExec: target_batch_size=8192    |
|    |                     FilterExec: <REDACTED>
|    |                       ParquetExec: limit=None, partitions={1 group: [[1/1/1/1/00000000-0000-0000-0000-000000000001.parquet]]}, predicate=host != Dictionary(Int32, Utf8("b")), pruning_predicate=host_min@0 != b OR b != host_max@1, output_ordering=[host@0 ASC, time@2 ASC], projection=[host, load, time]    |
|    |    |
----------