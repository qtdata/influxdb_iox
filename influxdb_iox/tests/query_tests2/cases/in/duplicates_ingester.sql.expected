-- Test Setup: OneMeasurementFourChunksWithDuplicatesWithIngester
-- SQL: select time, state, city, min_temp, max_temp, area from h2o order by time, state, city;
-- Results After Sorting
+--------------------------------+-------+---------+----------+----------+------+
| time                           | state | city    | min_temp | max_temp | area |
+--------------------------------+-------+---------+----------+----------+------+
| 1970-01-01T00:00:00.000000050Z | MA    | Boston  | 70.4     |          |      |
| 1970-01-01T00:00:00.000000150Z | MA    | Bedford | 71.59    | 78.75    | 742  |
| 1970-01-01T00:00:00.000000250Z | MA    | Andover |          | 69.2     |      |
| 1970-01-01T00:00:00.000000250Z | MA    | Boston  | 65.4     | 75.4     |      |
| 1970-01-01T00:00:00.000000250Z | MA    | Reading | 53.4     |          |      |
| 1970-01-01T00:00:00.000000300Z | CA    | SF      | 79       | 87.2     | 500  |
| 1970-01-01T00:00:00.000000300Z | CA    | SJ      | 78.5     | 88       |      |
| 1970-01-01T00:00:00.000000350Z | CA    | SJ      | 75.5     | 84.08    |      |
| 1970-01-01T00:00:00.000000400Z | MA    | Bedford | 65.22    | 80.75    | 750  |
| 1970-01-01T00:00:00.000000400Z | MA    | Boston  | 65.4     | 82.67    |      |
| 1970-01-01T00:00:00.000000450Z | CA    | SJ      | 77       | 90.7     |      |
| 1970-01-01T00:00:00.000000500Z | CA    | SJ      | 69.5     | 88.2     |      |
| 1970-01-01T00:00:00.000000600Z | MA    | Bedford |          | 88.75    | 742  |
| 1970-01-01T00:00:00.000000600Z | MA    | Boston  | 67.4     |          |      |
| 1970-01-01T00:00:00.000000600Z | MA    | Reading | 60.4     |          |      |
| 1970-01-01T00:00:00.000000650Z | CA    | SF      | 68.4     | 85.7     | 500  |
| 1970-01-01T00:00:00.000000650Z | CA    | SJ      | 69.5     | 89.2     |      |
| 1970-01-01T00:00:00.000000700Z | CA    | SJ      | 75.5     | 84.08    |      |
+--------------------------------+-------+---------+----------+----------+------+
-- SQL: explain select time, state, city, min_temp, max_temp, area from h2o order by time, state, city;
-- Results After Normalizing UUIDs
----------
| plan_type    | plan    |
----------
| logical_plan    | Sort: h2o.time ASC NULLS LAST, h2o.state ASC NULLS LAST, h2o.city ASC NULLS LAST    |
|    |   Projection: h2o.time, h2o.state, h2o.city, h2o.min_temp, h2o.max_temp, h2o.area    |
|    |     TableScan: h2o projection=[area, city, max_temp, min_temp, state, time]    |
| physical_plan    | SortExec: expr=[time@0 ASC NULLS LAST,state@1 ASC NULLS LAST,city@2 ASC NULLS LAST]    |
|    |   CoalescePartitionsExec    |
|    |     ProjectionExec: expr=[time@5 as time, state@4 as state, city@1 as city, min_temp@3 as min_temp, max_temp@2 as max_temp, area@0 as area]    |
|    |       UnionExec    |
|    |         DeduplicateExec: [state@4 ASC,city@1 ASC,time@5 ASC]    |
|    |           SortPreservingMergeExec: [state@4 ASC,city@1 ASC,time@5 ASC]    |
|    |             UnionExec    |
|    |               ParquetExec: limit=None, partitions={1 group: [[1/1/1/1/00000000-0000-0000-0000-000000000000.parquet]]}, output_ordering=[state@4 ASC, city@1 ASC, time@5 ASC], projection=[area, city, max_temp, min_temp, state, time]    |
|    |               ParquetExec: limit=None, partitions={1 group: [[1/1/1/1/00000000-0000-0000-0000-000000000001.parquet]]}, output_ordering=[state@4 ASC, city@1 ASC, time@5 ASC], projection=[area, city, max_temp, min_temp, state, time]    |
|    |         DeduplicateExec: [city@1 ASC,state@4 ASC,time@5 ASC]    |
|    |           SortExec: expr=[city@1 ASC,state@4 ASC,time@5 ASC]    |
|    |             RecordBatchesExec: batches_groups=1 batches=1 total_rows=6    |
|    |         ParquetExec: limit=None, partitions={1 group: [[1/1/1/1/00000000-0000-0000-0000-000000000002.parquet]]}, projection=[area, city, max_temp, min_temp, state, time]    |
|    |    |
----------
-- SQL: EXPLAIN select time, state, city, min_temp, max_temp, area from h2o;
-- Results After Normalizing UUIDs
----------
| plan_type    | plan    |
----------
| logical_plan    | Projection: h2o.time, h2o.state, h2o.city, h2o.min_temp, h2o.max_temp, h2o.area    |
|    |   TableScan: h2o projection=[area, city, max_temp, min_temp, state, time]    |
| physical_plan    | ProjectionExec: expr=[time@5 as time, state@4 as state, city@1 as city, min_temp@3 as min_temp, max_temp@2 as max_temp, area@0 as area]    |
|    |   UnionExec    |
|    |     DeduplicateExec: [state@4 ASC,city@1 ASC,time@5 ASC]    |
|    |       SortPreservingMergeExec: [state@4 ASC,city@1 ASC,time@5 ASC]    |
|    |         UnionExec    |
|    |           ParquetExec: limit=None, partitions={1 group: [[1/1/1/1/00000000-0000-0000-0000-000000000000.parquet]]}, output_ordering=[state@4 ASC, city@1 ASC, time@5 ASC], projection=[area, city, max_temp, min_temp, state, time]    |
|    |           ParquetExec: limit=None, partitions={1 group: [[1/1/1/1/00000000-0000-0000-0000-000000000001.parquet]]}, output_ordering=[state@4 ASC, city@1 ASC, time@5 ASC], projection=[area, city, max_temp, min_temp, state, time]    |
|    |     DeduplicateExec: [city@1 ASC,state@4 ASC,time@5 ASC]    |
|    |       SortExec: expr=[city@1 ASC,state@4 ASC,time@5 ASC]    |
|    |         RecordBatchesExec: batches_groups=1 batches=1 total_rows=6    |
|    |     ParquetExec: limit=None, partitions={1 group: [[1/1/1/1/00000000-0000-0000-0000-000000000002.parquet]]}, projection=[area, city, max_temp, min_temp, state, time]    |
|    |    |
----------
-- SQL: EXPLAIN select state as name from h2o UNION ALL select city as name from h2o;
-- Results After Normalizing UUIDs
----------
| plan_type    | plan    |
----------
| logical_plan    | Union    |
|    |   Projection: h2o.state AS name    |
|    |     TableScan: h2o projection=[state]    |
|    |   Projection: h2o.city AS name    |
|    |     TableScan: h2o projection=[city]    |
| physical_plan    | UnionExec    |
|    |   ProjectionExec: expr=[state@0 as name]    |
|    |     UnionExec    |
|    |       ProjectionExec: expr=[state@1 as state]    |
|    |         DeduplicateExec: [state@1 ASC,city@0 ASC,time@2 ASC]    |
|    |           SortPreservingMergeExec: [state@1 ASC,city@0 ASC,time@2 ASC]    |
|    |             UnionExec    |
|    |               ParquetExec: limit=None, partitions={1 group: [[1/1/1/1/00000000-0000-0000-0000-000000000000.parquet]]}, output_ordering=[state@1 ASC, city@0 ASC, time@2 ASC], projection=[city, state, time]    |
|    |               ParquetExec: limit=None, partitions={1 group: [[1/1/1/1/00000000-0000-0000-0000-000000000001.parquet]]}, output_ordering=[state@1 ASC, city@0 ASC, time@2 ASC], projection=[city, state, time]    |
|    |       ProjectionExec: expr=[state@1 as state]    |
|    |         DeduplicateExec: [city@0 ASC,state@1 ASC,time@2 ASC]    |
|    |           SortExec: expr=[city@0 ASC,state@1 ASC,time@2 ASC]    |
|    |             RecordBatchesExec: batches_groups=1 batches=1 total_rows=6    |
|    |       ParquetExec: limit=None, partitions={1 group: [[1/1/1/1/00000000-0000-0000-0000-000000000002.parquet]]}, projection=[state]    |
|    |   ProjectionExec: expr=[city@0 as name]    |
|    |     UnionExec    |
|    |       ProjectionExec: expr=[city@0 as city]    |
|    |         DeduplicateExec: [state@1 ASC,city@0 ASC,time@2 ASC]    |
|    |           SortPreservingMergeExec: [state@1 ASC,city@0 ASC,time@2 ASC]    |
|    |             UnionExec    |
|    |               ParquetExec: limit=None, partitions={1 group: [[1/1/1/1/00000000-0000-0000-0000-000000000000.parquet]]}, output_ordering=[state@1 ASC, city@0 ASC, time@2 ASC], projection=[city, state, time]    |
|    |               ParquetExec: limit=None, partitions={1 group: [[1/1/1/1/00000000-0000-0000-0000-000000000001.parquet]]}, output_ordering=[state@1 ASC, city@0 ASC, time@2 ASC], projection=[city, state, time]    |
|    |       ProjectionExec: expr=[city@0 as city]    |
|    |         DeduplicateExec: [city@0 ASC,state@1 ASC,time@2 ASC]    |
|    |           SortExec: expr=[city@0 ASC,state@1 ASC,time@2 ASC]    |
|    |             RecordBatchesExec: batches_groups=1 batches=1 total_rows=6    |
|    |       ParquetExec: limit=None, partitions={1 group: [[1/1/1/1/00000000-0000-0000-0000-000000000002.parquet]]}, projection=[city]    |
|    |    |
----------
-- SQL: select count(*) from h2o;
+-----------------+
| COUNT(UInt8(1)) |
+-----------------+
| 18              |
+-----------------+