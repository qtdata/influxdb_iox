-- Query tests derived from https://github.com/influxdata/influxdb_iox/issues/6112
-- IOX_SETUP: InfluxQLSelectSupport

--
-- Single measurement queries
--

-- Validates expected data is returned
-- Projection wildcard, all tags and fields
-- IOX_COMPARE: sorted
SELECT * FROM m0;

-- No matching measurement
SELECT * FROM non_existent;

-- Projection wildcard, only tags
-- IOX_COMPARE: sorted
SELECT *::tag, f64 FROM m0;

-- Projection wildcard, only fields
-- IOX_COMPARE: sorted
SELECT *::field FROM m0;

-- Projection regex, mixture of tags and fields
-- IOX_COMPARE: sorted
SELECT /64|tag0/ FROM m0;

-- Projection specific tags and fields
-- IOX_COMPARE: sorted
SELECT f64, tag0 FROM m0;

-- Explicitly select time column
-- IOX_COMPARE: sorted
SELECT f64, tag0, time FROM m0;

-- arithmetic operators
-- IOX_COMPARE: sorted
SELECT f64, f64 * 2, i64, i64 + i64 FROM m0;

-- bitwise operators
-- IOX_COMPARE: sorted
SELECT i64, i64 & 1 FROM m0;

-- Automatic type coercion integer â†’ float
-- IOX_COMPARE: sorted
SELECT f64 + i64 FROM m0;

-- Type cast postfix operator
SELECT f64, f64::integer FROM m0;

-- Column alias behaviour
-- IOX_COMPARE: sorted
SELECT f64 AS f64_2, f64, f64, f64 FROM m0 LIMIT 1;

--
-- WHERE clause
--

-- Single tag
-- IOX_COMPARE: sorted
SELECT tag0, f64 FROM m0 WHERE tag0 = 'val00';

-- IOX_COMPARE: sorted
SELECT tag0, f64 FROM m0 WHERE tag0 =~ /^val0(1|2)/;

-- Conjunction (AND)
-- IOX_COMPARE: sorted
SELECT /tag(0|1)/, f64 FROM m0 WHERE tag0 = 'val00' AND tag1 = 'val10';

-- Disjunction (OR)
-- IOX_COMPARE: sorted
SELECT /tag(0|1)/, f64 FROM m0 WHERE tag0 = 'val00' OR tag1 = 'val10';

-- arithmetic
-- IOX_COMPARE: sorted
SELECT f64 FROM m0 WHERE f64 > 10 + 10;

-- bitwise
-- IOX_COMPARE: sorted
SELECT i64 FROM m0 WHERE i64 & 1 = 0;

-- time bounds

-- timestamp format %Y-%M-%D
-- IOX_COMPARE: sorted
SELECT i64 FROM m0 WHERE time > '2022-10-31';

-- timestamp format %Y-%M-%D %h:%m:%s
-- IOX_COMPARE: sorted
SELECT i64 FROM m0 WHERE time > '2022-10-31 02:00:10';

-- now() and duration
-- NOTE: 100000d is > 270 years, so this test should be ok for a while.
--       However, if this test is still in use in 270 years and it starts failing,
--       try increasing the number of days ðŸ˜‚
-- IOX_COMPARE: sorted
SELECT i64 FROM m0 WHERE time > now() - 100000d;

-- NOT NULL test
-- WHERE tag1 != '' is the equivalent to tag1 IS NOT NULL
-- TODO(sgc): This is working, but likely by accident
-- IOX_COMPARE: sorted
SELECT tag1, f64 FROM m0 WHERE tag1 != '';

-- NULL test
-- WHERE tag1 = '' is the equivalent to tag1 IS NULL
-- TODO(sgc): Not working, as expected
-- -- IOX_COMPARE: sorted
-- SELECT tag1, f64 FROM m0 WHERE tag1 = '';

--
-- LIMIT and OFFSET clauses
-- NOTE: these are working, but due to incorrect default ordering
-- some tests fail
--

SELECT tag0, f64 FROM m0 LIMIT 1;

SELECT tag0, f64 FROM m0 WHERE tag0 = 'val00' LIMIT 2 OFFSET 1;

SELECT tag0, f64 FROM m0 LIMIT 1 OFFSET 1;

-- OFFSET clause, no LIMIT clause
-- TODO(sgc): Fails due to a bug in InfluxQL that utilises the following optimisation
--  https://github.com/influxdata/influxdb/blob/dee8977d2c6598cb2d17e9334ea997c99853640a/tsdb/engine/tsm1/iterator.gen.go#L344-L347
--  which breaks after returning the first point after the offset, because itr.opt.Limit == 0
-- SELECT tag0, f64 FROM m0 OFFSET 1;

--
-- Sort ordering
--

-- No GROUP BY clause

-- Default sort: expected output should default to ORDER BY TIME asc
SELECT * FROM m0;

-- Sort time in descending order
SELECT * FROM m0 ORDER BY time DESC;

--
-- Scalar functions in projection
--

-- Validate all scalar functions with a float field
SELECT
    f64,
    abs(f64 * -1),
    sin(f64),
    cos(f64),
    tan(f64),
    asin(1/f64),
    acos(1/f64),
    atan(f64),
    atan2(f64, 2),
    exp(f64),
-- TODO(sgc): Dependent on https://github.com/apache/arrow-datafusion/issues/5206
--    log(f64, 8),
    ln(f64),
    log2(f64),
    log10(f64),
    sqrt(f64),
    pow(f64, 2),
    floor(f64),
    ceil(f64),
    round(f64)
FROM m0 LIMIT 1;

-- Validate all scalar functions with an integer field
SELECT
    i64,
    abs(i64 * -1),
    sin(i64),
    cos(i64),
    tan(i64),
-- TODO(sgc): Not coerced to float, so returns incorrect result
--    asin(1/i64),
    acos(1/i64),
    atan(i64),
    atan2(i64, 2),
    exp(i64),
-- TODO(sgc): Dependent on https://github.com/apache/arrow-datafusion/issues/5206
--    log(i64, 8),
    ln(i64),
    log2(i64),
    log10(i64),
    sqrt(i64),
    pow(i64, 2),
    floor(i64),
    ceil(i64),
    round(i64)
FROM m0 LIMIT 1;

-- Deviation from InfluxQL is that NaNs are not coalesced to NULL
-- The InfluxQL compatibility later will be responsible for this translation
SELECT f64, asin(f64), acos(f64) FROM m0 LIMIT 1;

-- INF support
SELECT f64, pow(f64, pow(2, 10)) FROM m0 LIMIT 1;

--
-- TZ clause support
--

-- Interpret date/time (%Y-%M-%D %h:%m:%s) in timezone specified by TZ clause
-- TODO(sgc): condition is correct, but `time` column is not display in local timezone
--  as DataFusion does not support timestamp with timezone data types, and displaying
--  the values in the local timezone

---- SELECT f64 FROM m0 WHERE time = '2022-10-31 13:00:00' TZ('Australia/Hobart');
---- SELECT f64 FROM m0 WHERE time = '2022-10-31T13:00:00Z' TZ('Australia/Hobart');

--
-- Validate conditional expressions
--

SELECT f64 FROM m0 WHERE f64 >= 19 + 0.5;
SELECT f64 FROM m0 WHERE f64 - 0.5 >= 19;
SELECT f64 FROM m0 WHERE str = 'h' + 'i';

-- should be odd floating point numbers
SELECT f64 FROM m0 WHERE f64::integer & 1 = 1;

-- should be even floating point numbers
SELECT f64 FROM m0 WHERE f64::integer & 1 = 0;

-- These two deviate from InfluxQL, as the casting is optional
SELECT f64 FROM m0 WHERE f64 & 1 = 1;
SELECT f64 FROM m0 WHERE f64 & 1 = 0;

-- Expressions with incompatible types should succeed and may or may not return results
SELECT f64 FROM m0 WHERE f64 >= 19 + 0.5 OR str = 1;
SELECT f64 FROM m0 WHERE f64 >= 19.5 AND str = 1;

-- Missing columns should succeed and may or may not return results
SELECT f64 FROM m0 WHERE f64 >= 19 + 0.5 OR non_existent = 1;
SELECT f64 FROM m0 WHERE f64 >= 19.5 AND non_existent = 1;

-- Regular expressions should succeed and may or may not return results
SELECT f64 FROM m0 WHERE f64 >= 19.5 AND f64 =~ /foo/;
SELECT f64 FROM m0 WHERE f64 >= 19.5 OR f64 =~ /foo/;

--
-- Validate column expressions
--

-- float types
SELECT tag0, f64, f64 * 0.5, f64 + str FROM m0 WHERE f64 > 19;
-- string types
SELECT tag0, str, str + 'foo', str * 5 FROM m0 WHERE f64 > 19;
-- integer types
SELECT tag0, i64, i64 * 0.5, i64 + f64::integer, i64 & 1 FROM m0 WHERE f64 > 19;

-- non-existing column
SELECT f64, non_existing, f64 + non_existing FROM m0 WHERE f64 > 19;

--
-- Multiple measurements in the FROM clause
--

SELECT usage_idle, bytes_used FROM cpu, disk;